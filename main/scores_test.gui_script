local it = require('assets.modules.income_timers')
local data = require('assets.modules.upgrades_data')

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.52, 0.30, 0.6, 0) } )
	
	sound.play('/sound#bgm', {delay = 0, gain = 1, pan = 0, speed = 1})

	self.upgrade_menu_node = gui.get_node('upgrade_menu')
	self.score_node = gui.get_node('text_score')
	self.music_button_node = gui.get_node('music_button')
	self.is_music_playing = true
	self.sfx_button_node = gui.get_node('sfx_button')
	self.is_sfx_playing = true

	self.income_points_node = gui.get_node('text_income_in_second')
	--self.kocha_face = gui.get_node('kocha_click')
	self.animation_play = false
	-- gui.set_text(self.score_node, it.global_score)
	self.building_buttons_list = {'forest', 'forge', 'magical_shop', 'ascension'}
	
	data.calculate_start_data()
	gui.set_text(self.income_points_node, data.GetCurrentIncome(1))

	
	-- image for clicks
	--self.kocha_face_image = gui.get_node('kocha_face')
	
	-- upgrade 1
	--self.upgrade_1_node = gui.get_node('upgrade_1') -- node to check input on it
	--self.upgrade_1_text_node = gui.get_node('upgrade_1_text')
	
	-- -- set gui data at game start
	--self.text_for_upgrade_1 = it.upgrades['forest']['upgrade_1'].name .. ' - ' .. it.upgrades['forest']['upgrade_1'].level .. '\nцена - ' .. it.upgrades['forest']['upgrade_1'].base_cost .. '\nдоход - ' .. it.upgrades['forest']['upgrade_1'].base_income
	--gui.set_text(self.upgrade_1_text_node, self.text_for_upgrade_1)
	
	--self.coin_particle = gui.get_node('coin_kocha_click_particle')
	
	
	self.upgrade_buttons_list = {}
	for i = 1, 9 do
		self.upgrade_buttons_list[i] = gui.get_node('text_upgrade_' .. i)
	end
	

end

local function GetCurrentScore(self)
	local score = data.GetScore(0)
	gui.set_text(self.score_node, 'Очки: ' .. score)
end

local function update_data_on_buttons(self, shop_name)
	for i = 1, #self.upgrade_buttons_list do
		local new_text = data.upgrades[shop_name]['upgrade_'..i].name .. 
		' - ' .. data.upgrades[shop_name]['upgrade_'..i].level .. '\n' .. 
		'цена = ' .. data.upgrades[shop_name]['upgrade_'..i].current_cost .. '\n' .. 
		'доход = ' .. data.upgrades[shop_name]['upgrade_'..i].current_points_to_add
		gui.set_text(self.upgrade_buttons_list[i], new_text)
	end
end

local function make_upgrade_2(self, upgrade_name)
	for k, v in pairs(data.opened_menu) do
		if v == true then
			if data.upgrades[k][upgrade_name].current_cost <= data.global_score then
				data.global_score = data.global_score - data.upgrades[k][upgrade_name].current_cost
				data.calculate_score_to_add(k, upgrade_name)
				gui.set_text(self.income_points_node, data.GetCurrentIncome(1))
				update_data_on_buttons(self, k)
			end
		end
	end
end

local function on_animate_done(self, node)
	gui.animate(self.kocha_face_image, 'scale', 1, gui.PLAYBACK_ONCE_PINGPONG, 0.2, 0.0, 
	function() 
		self.animation_play = false
	end
	)
end

local function close_upgrade_menu(self, action)
	if gui.pick_node(gui.get_node('close_upgrade_menu'), action.x, action.y) then
		gui.set_enabled(self.upgrade_menu_node, false)
		for i = 1, #data.opened_menu do
			data.opened_menu[i] = false
		end
	end
end

function check_shop_button(self, action)
	for i = 1, 4 do
		if gui.pick_node(gui.get_node(self.building_buttons_list[i]), action.x, action.y) then
			for i = 1, 4 do
				data.opened_menu[self.building_buttons_list[i]] = false
			end
			data.opened_menu[self.building_buttons_list[i]] = true
			
			gui.set_enabled(self.upgrade_menu_node, true)
			local upgrades_data = data.get_upgrades_button_data(self.building_buttons_list[i])
			for j = 1, upgrades_data['upgrade_counter'] do
				data.opened_menu[self.building_buttons_list[i]] = true
				local text = upgrades_data['upgrade_'..j].name .. 
				' - ' .. upgrades_data['upgrade_'..j].level .. '\n' .. 
				'цена = ' .. upgrades_data['upgrade_'..j].current_cost .. '\n' .. 
				'доход = ' .. upgrades_data['upgrade_'..j].current_points_to_add
				gui.set_text(self.upgrade_buttons_list[j], text)
			end
		end
	end
end

function change_audio_status(self, action)
	if gui.pick_node(self.music_button_node, action.x, action.y) then
		if self.is_music_playing then
			self.is_music_playing = false
			gui.play_flipbook(self.music_button_node, 'Icon_Setting_Bgm_Off')
			print(self.is_music_playing)
		else 
			self.is_music_playing = true
			gui.play_flipbook(self.music_button_node, 'Icon_Setting_Bgm_On')
			print(self.is_music_playing)
		end
	end

	if gui.pick_node(self.sfx_button_node, action.x, action.y) then
		if self.is_sfx_playing then
			-- gui.set_enabled(self.music_button_node, false)
			self.is_sfx_playing = false
			gui.play_flipbook(self.sfx_button_node, 'Icon_Setting_Sound_Off')
			print(self.is_sfx_playing)
		else 
			-- gui.set_enabled(self.music_button_node, false) 
			self.is_sfx_playing = true
			gui.play_flipbook(self.sfx_button_node, 'Icon_Setting_Sound_On')
			print(self.is_sfx_playing)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash('touch') and action.pressed then
		check_shop_button(self, action)
		close_upgrade_menu(self, action)
		change_audio_status(self, action)
		
		for i = 1, 9 do
			local node = gui.get_node('upgrade_' .. i)
			local upgrade_name = 'upgrade_' .. i
			if gui.pick_node(node, action.x, action.y) then
				make_upgrade_2(self, upgrade_name)
			end
		end

		-- if gui.pick_node(self.kocha_face, action.x, action.y) then
		-- 	it.global_score = it.global_score + 1
		-- 	gui.set_text(self.score_node, it.round_score(it.global_score, 0))
			
		-- 	if self.animation_play == false then
		-- 		self.animation_play = true
		-- 		gui.animate(self.kocha_face_image, 'scale', 0.7, gui.PLAYBACK_ONCE_PINGPONG, 0.2, 0.0, on_animate_done)
		-- 	end
		-- 	gui.play_particlefx(self.coin_particle)
		-- 	sound.play('/sound#click', {delay = 0, gain = 1, pan = 0, speed = 1})
		-- end
		-- for i = 1, #it.upgrades do 
		-- 	print(i)
		-- 	local node = gui.get_node('upgrade_' .. i)
		-- 	if gui.pick_node(node, action.x, action.y) then
		-- 		make_upgrade(self, 'upgrade_' .. i, i)
		-- 		sound.play('/sound#click', {delay = 0, gain = 1, pan = 0, speed = 1})
		-- 	end
		-- end
	end
end


function update(self, dt)
	GetCurrentScore(self)
end
